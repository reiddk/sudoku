class Sudoku {

    sudokuInit = {
        front: [
            [4, 9, 2, 7, 5, 1, 6, 3, 8],
            [2, 6, 1, 9, 7, 4, 3, 5, 8],
            [8, 7, 1, 4, 2, 3, 9, 5, 6]
        ],
        right: [
                [6,8,7,3,1,4,2,9,5],[3,9,8,1,7,5,6,4,2],[9,7,6,3,8,2,5,1,4]
            ],
        back: [
            [8,5,1,7,9,3,2,4,6],[9,8,5,3,6,1,7,4,2],[1,5,2,4,8,3,9,6,7]
        ],
        left: [
            [7,4,9,3,5,8,1,2,6],[8,7,4,3,2,6,5,1,9],[5,7,8,3,1,9,4,6,2]
        ],
        top: [
            [5,2,7,3,6,4,8,1,9],[6,3,5,2,1,7,9,8,4],[9,7,2,8,4,3,5,6,1]
        ],
        bottom: [
            [1,2,6,4,5,9,7,3,8],[2,6,9,8,5,1,7,4,3],[6,9,5,4,7,2,3,1,8]
        ]
    };

    sudokyViewablePieces = {
        front: [
            [1,1,5,8,11,12,17,17,19,22,22,24,25,29,32,33,35,40,40,45,49,50,55,58,58,59,61,63,65,65,67,67,70],[4,8,9,13,16,19,24,26,31,33,36,36,37,39,40,44,46,49,54,56,59,64,66,71,71,71,74,74,78,79,83],[1,6,11,15,15,20,23,24,25,26,31,32,34,36,37,40,44,44,46,47,51,53,57,60,61,66,68,70,73,74,77,77,82],[1,6,6,7,9,10,10,10,15,16,21,22,22,24,24,29,33,35,39,43,46,46,47,50,52,52,57,57,59,64,64,65,66]
        ],
        right: [[0,5,9,11,16,20,21,23,26,26,26,26,31,31,36,37,41,45,47,50,51,51,55,55,59,61,62,64,68,70,70,72,72],[5,8,10,11,11,13,15,16,19,20,25,27,28,29,29,32,36,36,37,40,44,49,51,54,55,59,61,64,69,69,71,74,79],[1,2,4,7,11,14,19,24,25,30,31,33,35,35,40,41,44,49,53,56,56,60,62,67,69,71,74,74,75,78,80,84],[2,3,7,11,12,16,16,20,24,27,29,31,32,36,41,43,48,51,51,53,55,60,64,67,67,72,72,77,82]],
        back: [[0,4,9,9,12,14,14,18,19,21,26,30,31,36,41,44,44,45,45,45,48,48,52,54,57,60,62,67,72,77,79,79,83],[1,5,7,11,14,14,17,18,18,18,21,26,29,33,36,40,44,48,48,49,50,50,55,59,64,69,72,74,79,81],[0,4,8,8,12,16,20,20,23,27,32,36,38,40,42,42,47,47,52,57,60,61,63,67,70,75,80,84],[5,5,8,13,16,18,18,20,21,24,25,29,29,31,32,35,36,36,40,40,40,43,44,48,53,56,56,60,61,61,63,67,68]],
        left: [[1,2,5,7,8,10,14,15,20,25,28,30,35,40,44,47,50,54,59,62,63,63,68,69,72,77,79,84],[1,3,4,4,7,7,12,16,20,24,25,25,30,34,38,38,38,40,41,44,48,52,52,52,55,57,59,60,64,69,73,78,79],[2,5,8,8,13,14,15,16,16,18,21,22,24,24,28,30,34,34,34,37,38,40,45,48,48,53,58,62,62,62,62,62,63],[4,4,6,11,16,20,20,22,27,27,27,31,34,36,39,44,44,47,52,56,60,60,62,62,63,63,68,68,69,74,75,76,80]],
        top: [[3,7,9,11,11,14,16,16,21,24,29,31,32,34,35,38,43,43,46,49,54,54,58,58,59,62,66,66,69,72,74,75,75],[0,5,5,7,11,14,14,17,21,22,23,24,24,26,27,31,35,36,37,40,45,47,52,52,54,58,61,61,66,68,70,70,70],[1,1,6,9,12,14,15,15,20,25,30,30,30,34,37,39,39,40,41,44,49,53,56,60,63,63,68,70,74,74,77,82],[1,5,10,11,16,17,18,18,21,24,29,31,31,36,41,45,50,52,57,60,64,67,70,73,75,75,77,77,79,81]],
        bottom: [[5,8,12,13,15,20,25,25,27,28,28,29,31,31,31,35,40,44,46,49,50,52,55,58,60,60,64,67,70,70,71,75,78],[3,3,6,7,12,17,22,22,24,24,27,27,32,36,41,42,47,48,50,55,55,59,60,65,69,74,74,74,74,76,81],[4,4,5,9,14,18,19,19,24,29,32,37,41,42,45,45,46,51,52,56,59,60,65,70,71,73,74,77,78,79,84],[2,6,6,6,10,13,14,16,21,22,24,29,33,36,41,43,47,51,53,56,59,59,60,61,64,65,67,68,69,72,75,77,81]]
    };

    produceRandomViewableNums () {
        const output = [];
        let prev = 0;
        while (prev < 81 && output.length < 33) {
            prev += Math.floor(Math.random() * 6);
            output.push(prev);
        }
        return output;
        }

        shuffle(array) {
            var currentIndex = array.length, temporaryValue, randomIndex;
          
            while (0 !== currentIndex) {
              randomIndex = Math.floor(Math.random() * currentIndex);
              currentIndex -= 1;
              temporaryValue = array[currentIndex];
              array[currentIndex] = array[randomIndex];
              array[randomIndex] = temporaryValue;
            }
          
            return array;
          }

    nextSudokuLine (prevLine, shift) {
        const out = [];
        for (const [index, item] of prevLine.entries()) {
            if (index - shift < 0) {
                out[index - shift + prevLine.length] = item;
            } else {
                out[index - shift] = item;
            }
        }
        return out;
    }

    generateSudokuArr(side, puzzleNum) {
        if (localStorage.getItem(`${side}_${puzzleNum}`)) {
            try {
                return JSON.parse(localStorage.getItem(`${side}_${puzzleNum}`));
            } catch (e) {
                console.log(e);
            }
        }
        let output = [];
        output.push(this.sudokuInit[side][puzzleNum]);
        
        for (let i = 1; i < 9; i++) {
            const tempLine = this.nextSudokuLine(output[i-1], (i %3 === 0)?1:3);
            output.push(tempLine);
        }
        const completed = output.reduce((arr, curr) => {
            return arr.concat(curr);
        }, []);
        const game = completed.map((val, index) => {
            return this.sudokyViewablePieces[side][puzzleNum].includes(index)?val:null;
        });
        return {
            completed,
            game,
            defaultPieces:this.sudokyViewablePieces[side][puzzleNum]
        }
    }

}

const sudoku = new Sudoku();

export default sudoku;